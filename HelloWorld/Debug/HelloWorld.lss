
HelloWorld.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000206  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080010e  0080010e  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001513  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf1  00000000  00000000  00001943  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068a  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cf  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d4  00000000  00000000  00003573  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	6b 00       	.word	0x006b	; ????
  6a:	a2 00       	.word	0x00a2	; ????

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e6 e0       	ldi	r30, 0x06	; 6
  80:	f2 e0       	ldi	r31, 0x02	; 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ae 30       	cpi	r26, 0x0E	; 14
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ae e0       	ldi	r26, 0x0E	; 14
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a4 32       	cpi	r26, 0x24	; 36
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c6 e3       	ldi	r28, 0x36	; 54
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  b8:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN6DriverC1Ehh>:
	motorA.stop();
}

void Driver::stop_B()
{
	motorB.stop();
  c0:	e0 e8       	ldi	r30, 0x80	; 128
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 6a       	ori	r24, 0xA1	; 161
  c8:	80 83       	st	Z, r24
  ca:	e1 e8       	ldi	r30, 0x81	; 129
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8d 60       	ori	r24, 0x0D	; 13
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <_GLOBAL__sub_I_motorA>:
*/

#include "Driver.h"
#include <avr/io.h>

MotorDriver motorA(PORTB,PORTB1,PORTB2);
  d6:	65 b1       	in	r22, 0x05	; 5
  d8:	22 e0       	ldi	r18, 0x02	; 2
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	85 e1       	ldi	r24, 0x15	; 21
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN11MotorDriverC1Ehii>
MotorDriver motorB(PORTB,PORTB1,PORTB2);
  e8:	65 b1       	in	r22, 0x05	; 5
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	8e e0       	ldi	r24, 0x0E	; 14
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN11MotorDriverC1Ehii>
  fa:	08 95       	ret

000000fc <main>:


int main(void)
{
	// INITIALIZATIONS
	DDRB |= (1 << DDB5);	//B5 output: board LED
  fc:	25 9a       	sbi	0x04, 5	; 4
	USART_Init(MYUBRR); // Initializes the serial communication
  fe:	87 e6       	ldi	r24, 0x67	; 103
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z10USART_Initj>

	
	
    while(1)
    {
		led1.on();
 106:	81 e2       	ldi	r24, 0x21	; 33
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN3LED2onEv>
        USART_Send_string("HELLO WORLD\n");
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_Z17USART_Send_stringPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	83 ed       	ldi	r24, 0xD3	; 211
 11a:	90 e3       	ldi	r25, 0x30	; 48
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x20>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x2a>
 126:	00 00       	nop
		_delay_ms(1000);	
		led1.off();
 128:	81 e2       	ldi	r24, 0x21	; 33
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 c2 00 	call	0x184	; 0x184 <_ZN3LED3offEv>
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	83 ed       	ldi	r24, 0xD3	; 211
 134:	90 e3       	ldi	r25, 0x30	; 48
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x3a>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x44>
 140:	00 00       	nop
 142:	e1 cf       	rjmp	.-62     	; 0x106 <main+0xa>

00000144 <_GLOBAL__sub_I_led1>:
#include "usart.h"			// Header for Serial communication



// OBJECT CREATION
LED led1(PORTB,5);			// Creates an object called led1 connected to PortB.5 (0x05 is the Special function register for PORTB)
 144:	65 b1       	in	r22, 0x05	; 5
 146:	45 e0       	ldi	r20, 0x05	; 5
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	81 e2       	ldi	r24, 0x21	; 33
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN3LEDC1Ehi>
Driver driver(PORTC,PORTB);
 152:	45 b1       	in	r20, 0x05	; 5
 154:	68 b1       	in	r22, 0x08	; 8
 156:	8c e1       	ldi	r24, 0x1C	; 28
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN6DriverC1Ehh>
 15e:	08 95       	ret

00000160 <_ZN3LEDC1Ehi>:
#include <avr/io.h>


LED::LED (unsigned char  p,int x)
{	
	PORT = p;
 160:	fc 01       	movw	r30, r24
 162:	62 83       	std	Z+2, r22	; 0x02
	PIN = x;
 164:	51 83       	std	Z+1, r21	; 0x01
 166:	40 83       	st	Z, r20
 168:	08 95       	ret

0000016a <_ZN3LED2onEv>:
}

void LED::on(void)
{
 16a:	fc 01       	movw	r30, r24
	set_bit(PORT,PIN);
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	00 80       	ld	r0, Z
 172:	02 c0       	rjmp	.+4      	; 0x178 <_ZN3LED2onEv+0xe>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <_ZN3LED2onEv+0xa>
 17c:	82 81       	ldd	r24, Z+2	; 0x02
 17e:	28 2b       	or	r18, r24
 180:	22 83       	std	Z+2, r18	; 0x02
 182:	08 95       	ret

00000184 <_ZN3LED3offEv>:
}

void LED::off(void)
{
 184:	fc 01       	movw	r30, r24
	clear_bit(PORT,PIN);
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	00 80       	ld	r0, Z
 18c:	02 c0       	rjmp	.+4      	; 0x192 <_ZN3LED3offEv+0xe>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <_ZN3LED3offEv+0xa>
 196:	20 95       	com	r18
 198:	82 81       	ldd	r24, Z+2	; 0x02
 19a:	28 23       	and	r18, r24
 19c:	22 83       	std	Z+2, r18	; 0x02
 19e:	08 95       	ret

000001a0 <_ZN11MotorDriverC1Ehii>:
*/

#include "MotorDriver.h"
#include <avr/io.h>

MotorDriver::MotorDriver(unsigned char port,int pin1,int pin2)
 1a0:	fc 01       	movw	r30, r24
{
	PORT = port;
	pin1 = pin1;
	pin2 = pin2;
	
	pwm = 0;
 1a2:	16 82       	std	Z+6, r1	; 0x06
 1a4:	15 82       	std	Z+5, r1	; 0x05
	
	set_bits(DDR(PORT),PIN1,PIN2);
 1a6:	83 81       	ldd	r24, Z+3	; 0x03
 1a8:	86 60       	ori	r24, 0x06	; 6
 1aa:	83 83       	std	Z+3, r24	; 0x03
	clear_bits(PORT,PIN1,PIN2);
 1ac:	69 7f       	andi	r22, 0xF9	; 249
 1ae:	64 83       	std	Z+4, r22	; 0x04
 1b0:	08 95       	ret

000001b2 <_Z10USART_Initj>:
#include <stdio.h>			// Conversions

void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 1b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 1b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1ba:	88 e1       	ldi	r24, 0x18	; 24
 1bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 1c0:	8e e0       	ldi	r24, 0x0E	; 14
 1c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1c6:	08 95       	ret

000001c8 <_Z14USART_Sendbyteh>:


void USART_Sendbyte( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 1c8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	90 81       	ld	r25, Z
 1ce:	95 ff       	sbrs	r25, 5
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <_Z14USART_Sendbyteh+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = char(data);
 1d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1d6:	08 95       	ret

000001d8 <_Z17USART_Send_stringPKc>:
}

void USART_Send_string(const char *str)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24

	while (*str)
 1de:	88 81       	ld	r24, Y
 1e0:	88 23       	and	r24, r24
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <_Z17USART_Send_stringPKc+0x18>
 1e4:	21 96       	adiw	r28, 0x01	; 1
	USART_Sendbyte(*str++);
 1e6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z14USART_Sendbyteh>
}

void USART_Send_string(const char *str)
{

	while (*str)
 1ea:	89 91       	ld	r24, Y+
 1ec:	81 11       	cpse	r24, r1
 1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <_Z17USART_Send_stringPKc+0xe>
	USART_Sendbyte(*str++);
	
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <__tablejump2__>:
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	05 90       	lpm	r0, Z+
 1fc:	f4 91       	lpm	r31, Z
 1fe:	e0 2d       	mov	r30, r0
 200:	09 94       	ijmp

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
